# syntax=docker/dockerfile:1.4

# Source system
# FROM ubuntu:noble
FROM saschpe/android-ndk:34-jdk22.0.2_9-ndk27.0.12077973-cmake3.22.1

# Qemu branch to build
ARG QemuVersionBranch=stable-9.1

# List of architectures we want to be able to run Qemu on, NOT emulated architectures. These are Linux arch codes.
ENV TargetArchs=x86_64,aarch64

# List of architectures we want to support emulating. This is Qemu's target list.
ARG TargetList=i386-softmmu,x86_64-softmmu,aarch64-softmmu


# ------------- no more config options below this line -------------



# Install dependencies
RUN apt update
RUN apt install -y build-essential ninja-build python3 python3-pip python3-setuptools python3-wheel zip pkg-config git wget gcc make 
RUN pip3 install --break-system-packages meson packaging

# Fetch qemu source
# Use config to skip that subhook submodule, since it's broken for some reason... Luckily it's just a testing lib and we don't need it
WORKDIR /src
RUN git \
    -c submodule."UnitTestFrameworkPkg/Library/SubhookLib/subhook".update=none \
    clone --recurse-submodules --branch $QemuVersionBranch --single-branch --jobs 8 https://github.com/qemu/qemu.git

# Fetch glib source
RUN git clone --recurse-submodules --branch 2.83.0 --single-branch --jobs 8 https://github.com/GNOME/glib.git

# Fetch libiconv source
RUN wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.17.tar.gz
RUN tar -xvf libiconv-1.17.tar.gz

# Make a copy of the Android sysroot for each target
RUN /bin/bash <<EOF

    # Loop through arch's
    for targetArch in \${TargetArchs//,/ } ; do

        # Copy Android sysroot for this arch
        echo "Copying Android sysroot for \$targetArch..."
        mkdir -p "/sysroot/\$targetArch"
        cp -r --dereference "\$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot/." "/sysroot/\$targetArch"

    done

EOF

# Create a script that will set up the environment for a particular architecture build
COPY <<-EOF /setup.sh

    # Ensure Android NDK binaries are on the path
    echo "Preparing to build for \$1..."
    export TOOLCHAIN=\$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64
    export PATH=\$TOOLCHAIN/bin:\$PATH

    # Prepare build environment to use Android NDK's build tools (clang instead of gcc)
    export SYSROOT="/sysroot/\$1"
    export ANDROID_LIBS="\$SYSROOT/usr/lib/\$1-linux-android/34/"
    export PKG_CONFIG_SYSROOT_DIR="\$SYSROOT"
    export PKG_CONFIG_PATH="\$SYSROOT/lib/pkgconfig"
    export PKG_CONFIG_LIBDIR="\$SYSROOT/lib/pkgconfig"
    export CC="\$TOOLCHAIN/bin/\$1-linux-android34-clang"
    export CXX="\$TOOLCHAIN/bin/\$1-linux-android34-clang++"
    export LD="\$TOOLCHAIN/bin/ld"
    export LLD="\$TOOLCHAIN/bin/lld"
    export AR="\$TOOLCHAIN/bin/llvm-ar"
    export STRIP="\$TOOLCHAIN/bin/llvm-strip"
    export RANLIB="\$TOOLCHAIN/bin/llvm-ranlib"
    export NM="\$TOOLCHAIN/bin/llvm-nm"
    export CFLAGS="--target=\$1-none-linux-android34 --sysroot=\$SYSROOT -DTEST_FREXPL_DECL=1 -DANDROID=1 -fPIE -fPIC -O3"
    export LDFLAGS="--target=\$1-none-linux-android34 --sysroot=\$SYSROOT -L\$ANDROID_LIBS -L\$SYSROOT/lib -L\$SYSROOT/usr/lib -fPIC -fPIE -pie -O3"

    # Setup cross-compilation file for meson based builds
    cat <<EOF2 > "/build/cross-file-\$1.txt"

        [binaries]
        c = '\$CC'
        cpp = '\$CXX'
        ar = '\$AR'
        ld = '\$LD'
        strip = '\$STRIP'
        pkg-config = '\$1-linux-android34-pkg-config'
        
        [host_machine]
        system = 'android'
        cpu_family = '\$targetArch'
        cpu = '\$targetArch'
        endian = 'little'

        [properties]
        sys_root = '\$SYSROOT'

EOF2

    # Android NDK does not provide a cross-compile prefixed pkg-config, so we need to provide one that just links to the system one
    ln -s /usr/bin/pkg-config "\$TOOLCHAIN/bin/\$1-linux-android34-pkg-config"

    # Test that our build environment works
    mkdir -p /build/test/\$1
    echo -e "int main() { return 0; }" > /build/test/\$1/test.c
    \$CC \$CFLAGS \$LDFLAGS /build/test/\$1/test.c -o /build/test/\$1/test || exit 1

EOF

# Build libiconv for each target
RUN /bin/bash <<EOF # Build libiconv

    # Loop through arch's
    for targetArch in \${TargetArchs//,/ } ; do

        # Setup build environment
        source /setup.sh "\$targetArch"

        # Make a copy of the source folder for this arch
        mkdir -p /build/libiconv/\$targetArch
        cp -r /src/libiconv-1.17/. "/build/libiconv/\$targetArch"
        cd "/build/libiconv/\$targetArch"

        # Build libiconv
        echo "Building libiconv..."
        ./configure --host="\$targetArch-linux-android34" --prefix="\$SYSROOT" --exec-prefix="\$SYSROOT" --enable-static || exit 1
        make -j\$(nproc) || exit 1
        make install || exit 1

        # Test that it was actually installed
        echo -e "\\nTesting for installation..."
        find "\$SYSROOT" -name "*iconv*"
        # \$targetArch-linux-android34-pkg-config --libs --print-errors iconv || exit 1
        # NOTE: iconv doesn't have pkg-config files, so we can't test it like this. We can ensure it's paths are in CFLAGS and LDFLAGS though.
        
    done

EOF

# Build glib for each target
RUN /bin/bash <<EOF # Build glibc

    # Loop through arch's
    for targetArch in \${TargetArchs//,/ } ; do

        # Setup build environment
        source /setup.sh "\$targetArch"

        # Make a copy of the source folder for this arch
        mkdir -p /build/glib/\$targetArch
        cp -r /src/glib/. "/build/glib/\$targetArch"
        cd "/build/glib/\$targetArch"

        # Build glib
        # See: https://docs.gtk.org/glib/building.html
        echo "Building GLib..."
        meson setup "_build" --prefix="\$SYSROOT" --cross-file "/build/cross-file-\$targetArch.txt" -Ddefault_library=both || exit 1
        meson compile -C "_build" -j\$(nproc) || exit 1
        meson install -C "_build" || exit 1

        # Test that it was actually installed
        echo -e "\\nTesting for installation..."
        find "\$SYSROOT" -name "*glib-2.0*"
        \$targetArch-linux-android34-pkg-config --libs --print-errors glib-2.0 || exit 1

    done

EOF

# Patch Qemu
RUN /bin/bash <<EOF # Patch Qemu

    # Patch shm_open/shm_unlink shims out of Qemu since Android doesn't support it, and they don't have a config option to disable it that I can find
    # TODO: Android has ashmem instead, maybe shim that in instead?
    sed -i -e '/hostmem-shm/s/^/#/' /src/qemu/backends/meson.build

    # Comment out all tests
    sed -i -e "/subdir('tests')/s/^/#/" /src/qemu/meson.build

EOF

# Build Qemu for each target
RUN /bin/bash <<EOF # Build Qemu

    # Loop through arch's
    for targetArch in \${TargetArchs//,/ } ; do

        # Setup build environment
        source /setup.sh "\$targetArch"

        # Test static pie
        # echo -e "int main() { return 0; }" > /build/test/\$targetArch/test.c
        # \$CC \$CFLAGS \$LDFLAGS /build/test/\$targetArch/test.c -o /build/test/\$targetArch/test -static-pie || exit 1
        # exit 2

        # Test pkg-config
        # \$targetArch-linux-android34-pkg-config --exists --print-errors glib-2.0
        # echo \$?
        # exit 2

        # Make a copy of the source folder for this arch
        mkdir -p /build/qemu/\$targetArch
        cp -r /src/qemu/. "/build/qemu/\$targetArch"
        cd "/build/qemu/\$targetArch"

        # Build Qemu
        # I would have liked --enable-pie but apparently Qemu is incorrectly detecting that it's not supported...
        echo "Configuring Qemu build..."
        ./configure                                                                 \
            --prefix="\$SYSROOT"                                                    \
            --cross-prefix="\$targetArch-linux-android34-"                          \
            --extra-cflags="\$CFLAGS"                                               \
            --extra-ldflags="\$LDFLAGS"                                             \
            --target-list=$TargetList                                               \
            --without-default-features                                              \
            --disable-werror                                                        \
            --enable-system                                                         \
            --enable-strip                                                          \
            --enable-stack-protector                                                \
            --enable-pie                                                            \
            --enable-lto                                                            \
            || exit 1

        # Build
        echo "Building Qemu..."
        make -j\$(nproc) || exit 1
        make install || exit 1

    done

EOF

# Cleanup, delete downloaded source and build directories
RUN /bin/bash <<EOF # Clean

    # Delete source and build directories
    rm -rf /src
    rm -rf /build

EOF

# Zip Qemu's assets, just use the ones from the ARM64 build since they are the same for all builds
WORKDIR /
RUN zip -r --verbose --junk-paths qemu-assets.zip "/sysroot/aarch64/share/qemu"

# At this point, the following files should exist:
# /sysroot/<target-arch>/bin/qemu-system-<emulated-arch> - The binaries
# /sysroot/<target-arch>/lib/ - The dynamic libraries
# /qemu-assets.zip - The assets

# Add final script to copy the binaries of the architectures we support to the jniLibs folder. Since the Android project has extractNativeLibs set,
# everything in the jniLibs folder will be extracted to the device's file system and marked as executable. An interesting workaround for the fact that
# on newer Android OSes you are no longer allowed to run executables from the app's data directory.
COPY <<-EOF /finish.sh

    # Remove existing files
    rm /project/app/src/main/assets/qemu-assets.zip || true
    rm -rf /project/app/src/main/jniLibs || true

    # Copy assets zip
    mkdir -p /project/app/src/main/assets
    cp --verbose /qemu-assets.zip /project/app/src/main/assets/qemu-assets.zip || exit 1

    # Copy binaries to the right place.
    for targetArch in \${TargetArchs//,/ } ; do

        # Map linux arch codes to android ones
        if [ "\$targetArch" = "x86_64" ] ; then
            androidArch="x86_64"
        elif [ "\$targetArch" = "aarch64" ] ; then
            androidArch="arm64-v8a"
        else
            echo "Unknown target arch: \$targetArch - using as is"
            androidArch="\$targetArch"
        fi

        # Make sure the right jniLibs folder exists
        mkdir -p "/project/app/src/main/jniLibs/\$androidArch"

        # Copy each emulated arch's binary
        cd "/sysroot/\$targetArch/bin"
        for emulatedArchBinary in qemu-system-* ; do
            cp --verbose "\$emulatedArchBinary" "/project/app/src/main/jniLibs/\$androidArch/lib\$emulatedArchBinary.so" || exit 1
        done

        # Copy the required dynamic libraries as well
        cp --verbose "/sysroot/\$targetArch/lib/libglib-2.0.so" "/project/app/src/main/jniLibs/\$androidArch/" || exit 1
        cp --verbose "/sysroot/\$targetArch/lib/libintl.so" "/project/app/src/main/jniLibs/\$androidArch/" || exit 1
        cp --verbose "/sysroot/\$targetArch/lib/libiconv.so" "/project/app/src/main/jniLibs/\$androidArch/" || exit 1

    done

    # DEBUG: Copy entire bundle to project directory
    # cp -r --dereference --verbose ./ /project/qemu-bundle

EOF

# Make script runnable
RUN chmod +x /finish.sh

# Run command will just copy necessary files to the project directory
CMD /bin/bash /finish.sh
